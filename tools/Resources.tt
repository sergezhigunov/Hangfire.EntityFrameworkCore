<#@ template hostspecific="true" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#
    var model = LoadResources();
#>
// <auto-generated />
using System.Resources;

namespace <#= NamespaceHint #>;

internal static class <#= model.Class #>
{
    private static ResourceManager ResourceManager { get; } = new ResourceManager(
        "<#= model.ResourceName #>",
        typeof(<#= model.Class #>).Assembly);
<#
    foreach (var resource in model.Resources)
    {
#>

<#
        if (resource.Parameters.Any())
        {
#>
    public static string <#= resource.Name #>(
<#
    for (int index = 0; index < resource.Parameters.Count; index++)
    {
        var number = index + 1;
#>
        object <#= resource.Parameters[index] #><#= number == resource.Parameters.Count ? ")" : "," #>
<#
    }
#>
        => string.Format(
            GetString(
                "<#= resource.Name #>",
<#
    for (int index = 0; index < resource.Parameters.Count; index++)
    {
        var number = index + 1;
#>
                <#= "nameof(" + resource.Parameters[index] + ")" + (number == resource.Parameters.Count ? ")," : ",") #>
<#
    }
    for (int index = 0; index < resource.Parameters.Count; index++)
    {
        var number = index + 1;
#>
            <#= resource.Parameters[index] + (number == resource.Parameters.Count ? ");" : ",") #>
<#
    }
        }
        else
        {
#>
    public static string <#= resource.Name #>
        => GetString("<#= resource.Name #>");
<#
        }
    }
#>

    private static string GetString(string name, params string[] formatterNames)
    {
        var value = ResourceManager.GetString(name);
        for (var i = 0; i < formatterNames.Length; i++)
            value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");

        return value;
    }
}<#+
    ResourceFile LoadResources()
    {
        var serviceProvider = (IServiceProvider)Host;
        var dte = (DTE)serviceProvider.GetService(typeof(DTE));
        var templateFile = Host.TemplateFile;
        var resourceFile = Path.ChangeExtension(templateFile, "resx");
        var result = new ResourceFile();
        result.Class = Path.GetFileNameWithoutExtension(resourceFile);
        result.ResourceName = $"{NamespaceHint}.{result.Class}";
        using (var reader = new ResXResourceReader(resourceFile))
        {
            result.Resources = Enumerable.ToList(
                from DictionaryEntry r in reader
                let value = (string)r.Value
                select new Resource
                {
                    Name = (string)r.Key,
                    Value = value,
                    Parameters = Regex.Matches(value, @"\{(\w+)\}")
                        .Cast<Match>()
                        .Select(m => m.Groups[1].Value)
                        .Distinct()
                        .ToList()
                });
        }

        return result;
    }

    class ResourceFile
    {
        public string Namespace { get; set; }
        public string Class { get; set; }
        public string ResourceName { get; set; }
        public List<Resource> Resources { get; set; }
    }

    class Resource
    {
        public string Name { get; set; }
        public string Value { get; set; }
        public List<string> Parameters { get; set; }
    }
#>
