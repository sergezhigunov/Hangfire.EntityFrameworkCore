// <auto-generated />
using System;
using Hangfire.EntityFrameworkCore.AspNetCoreInternalDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hangfire.EntityFrameworkCore.AspNetCoreInternalDbContext.Migrations
{
    [DbContext(typeof(SampleDbContext))]
    [Migration("20210201122720_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.AspNetCoreInternalDbContext.SampleTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SampleTables");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireCounter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExpireAt");

                    b.HasIndex("Key", "Value");

                    b.ToTable("HangfireCounter");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireHash", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key", "Field");

                    b.HasIndex("ExpireAt");

                    b.ToTable("HangfireHash");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvocationData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StateName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExpireAt");

                    b.HasIndex("StateId");

                    b.HasIndex("StateName");

                    b.ToTable("HangfireJob");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireJobParameter", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("JobId", "Name");

                    b.ToTable("HangfireJobParameter");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireList", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key", "Position");

                    b.HasIndex("ExpireAt");

                    b.ToTable("HangfireList");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireLock", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HangfireLock");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireQueuedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FetchedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<long>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("Queue", "FetchedAt");

                    b.ToTable("HangfireQueuedJob");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireServer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Heartbeat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Queues")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkerCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Heartbeat");

                    b.ToTable("HangfireServer");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireSet", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("Key", "Value");

                    b.HasIndex("ExpireAt");

                    b.HasIndex("Key", "Score");

                    b.ToTable("HangfireSet");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("HangfireState");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireJob", b =>
                {
                    b.HasOne("Hangfire.EntityFrameworkCore.HangfireState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireJobParameter", b =>
                {
                    b.HasOne("Hangfire.EntityFrameworkCore.HangfireJob", "Job")
                        .WithMany("Parameters")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireQueuedJob", b =>
                {
                    b.HasOne("Hangfire.EntityFrameworkCore.HangfireJob", "Job")
                        .WithMany("QueuedJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireState", b =>
                {
                    b.HasOne("Hangfire.EntityFrameworkCore.HangfireJob", "Job")
                        .WithMany("States")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Hangfire.EntityFrameworkCore.HangfireJob", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("QueuedJobs");

                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
